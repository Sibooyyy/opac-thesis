{
  "version": 3,
  "sources": ["../../chartjs-chart-matrix/dist/chartjs-chart-matrix.esm.js"],
  "sourcesContent": ["/*!\r\n * chartjs-chart-matrix v2.0.1\r\n * https://chartjs-chart-matrix.pages.dev/\r\n * (c) 2023 Jukka Kurkela\r\n * Released under the MIT license\r\n */\r\nimport { DatasetController, Element } from 'chart.js';\r\nimport { toTRBLCorners, addRoundedRectPath, isObject } from 'chart.js/helpers';\r\n\r\nvar version = \"2.0.1\";\r\n\r\nclass MatrixController extends DatasetController {\r\n\r\n  static id = 'matrix';\r\n  static version = version;\r\n\r\n  static defaults = {\r\n    dataElementType: 'matrix',\r\n\r\n    animations: {\r\n      numbers: {\r\n        type: 'number',\r\n        properties: ['x', 'y', 'width', 'height']\r\n      }\r\n    },\r\n  };\r\n\r\n  static overrides = {\r\n    interaction: {\r\n      mode: 'nearest',\r\n      intersect: true\r\n    },\r\n    scales: {\r\n      x: {\r\n        type: 'linear',\r\n        offset: true\r\n      },\r\n      y: {\r\n        type: 'linear',\r\n        reverse: true\r\n      }\r\n    },\r\n  };\r\n\r\n  initialize() {\r\n    this.enableOptionSharing = true;\r\n    super.initialize();\r\n  }\r\n\r\n  update(mode) {\r\n    const me = this;\r\n    const meta = me._cachedMeta;\r\n\r\n    me.updateElements(meta.data, 0, meta.data.length, mode);\r\n  }\r\n\r\n  updateElements(rects, start, count, mode) {\r\n    const me = this;\r\n    const reset = mode === 'reset';\r\n    const {xScale, yScale} = me._cachedMeta;\r\n    const firstOpts = me.resolveDataElementOptions(start, mode);\r\n    const sharedOptions = me.getSharedOptions(mode, rects[start], firstOpts);\r\n\r\n    for (let i = start; i < start + count; i++) {\r\n      const parsed = !reset && me.getParsed(i);\r\n      const x = reset ? xScale.getBasePixel() : xScale.getPixelForValue(parsed.x);\r\n      const y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(parsed.y);\r\n      const options = me.resolveDataElementOptions(i, mode);\r\n      const {width, height, anchorX, anchorY} = options;\r\n      const properties = {\r\n        x: resolveX(anchorX, x, width),\r\n        y: resolveY(anchorY, y, height),\r\n        width,\r\n        height,\r\n        options\r\n      };\r\n      me.updateElement(rects[i], i, properties, mode);\r\n    }\r\n\r\n    me.updateSharedOptions(sharedOptions, mode);\r\n  }\r\n\r\n  draw() {\r\n    const me = this;\r\n    const data = me.getMeta().data || [];\r\n    let i, ilen;\r\n\r\n    for (i = 0, ilen = data.length; i < ilen; ++i) {\r\n      data[i].draw(me._ctx);\r\n    }\r\n  }\r\n}\r\n\r\nfunction resolveX(anchorX, x, width) {\r\n  if (anchorX === 'left' || anchorX === 'start') {\r\n    return x;\r\n  }\r\n  if (anchorX === 'right' || anchorX === 'end') {\r\n    return x - width;\r\n  }\r\n  return x - width / 2;\r\n}\r\n\r\nfunction resolveY(anchorY, y, height) {\r\n  if (anchorY === 'top' || anchorY === 'start') {\r\n    return y;\r\n  }\r\n  if (anchorY === 'bottom' || anchorY === 'end') {\r\n    return y - height;\r\n  }\r\n  return y - height / 2;\r\n}\r\n\r\n/**\r\n * Helper function to get the bounds of the rect\r\n * @param {MatrixElement} rect the rect\r\n * @param {boolean} [useFinalPosition]\r\n * @return {object} bounds of the rect\r\n * @private\r\n */\r\nfunction getBounds(rect, useFinalPosition) {\r\n  const {x, y, width, height} = rect.getProps(['x', 'y', 'width', 'height'], useFinalPosition);\r\n  return {left: x, top: y, right: x + width, bottom: y + height};\r\n}\r\n\r\nfunction limit(value, min, max) {\r\n  return Math.max(Math.min(value, max), min);\r\n}\r\n\r\nfunction parseBorderWidth(rect, maxW, maxH) {\r\n  const value = rect.options.borderWidth;\r\n  let t, r, b, l;\r\n\r\n  if (isObject(value)) {\r\n    t = +value.top || 0;\r\n    r = +value.right || 0;\r\n    b = +value.bottom || 0;\r\n    l = +value.left || 0;\r\n  } else {\r\n    t = r = b = l = +value || 0;\r\n  }\r\n\r\n  return {\r\n    t: limit(t, 0, maxH),\r\n    r: limit(r, 0, maxW),\r\n    b: limit(b, 0, maxH),\r\n    l: limit(l, 0, maxW)\r\n  };\r\n}\r\n\r\nfunction boundingRects(rect) {\r\n  const bounds = getBounds(rect);\r\n  const width = bounds.right - bounds.left;\r\n  const height = bounds.bottom - bounds.top;\r\n  const border = parseBorderWidth(rect, width / 2, height / 2);\r\n\r\n  return {\r\n    outer: {\r\n      x: bounds.left,\r\n      y: bounds.top,\r\n      w: width,\r\n      h: height\r\n    },\r\n    inner: {\r\n      x: bounds.left + border.l,\r\n      y: bounds.top + border.t,\r\n      w: width - border.l - border.r,\r\n      h: height - border.t - border.b\r\n    }\r\n  };\r\n}\r\n\r\nfunction inRange(rect, x, y, useFinalPosition) {\r\n  const skipX = x === null;\r\n  const skipY = y === null;\r\n  const bounds = !rect || (skipX && skipY) ? false : getBounds(rect, useFinalPosition);\r\n\r\n  return bounds\r\n\t\t&& (skipX || x >= bounds.left && x <= bounds.right)\r\n\t\t&& (skipY || y >= bounds.top && y <= bounds.bottom);\r\n}\r\n\r\nclass MatrixElement extends Element {\r\n\r\n  static id = 'matrix';\r\n\r\n  static defaults = {\r\n    backgroundColor: undefined,\r\n    borderColor: undefined,\r\n    borderWidth: undefined,\r\n    borderRadius: 0,\r\n    anchorX: 'center',\r\n    anchorY: 'center',\r\n    width: 20,\r\n    height: 20\r\n  };\r\n\r\n  constructor(cfg) {\r\n    super();\r\n\r\n    this.options = undefined;\r\n    this.width = undefined;\r\n    this.height = undefined;\r\n\r\n    if (cfg) {\r\n      Object.assign(this, cfg);\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    const options = this.options;\r\n    const {inner, outer} = boundingRects(this);\r\n    const radius = toTRBLCorners(options.borderRadius);\r\n\r\n    ctx.save();\r\n\r\n    if (outer.w !== inner.w || outer.h !== inner.h) {\r\n      ctx.beginPath();\r\n      addRoundedRectPath(ctx, {x: outer.x, y: outer.y, w: outer.w, h: outer.h, radius});\r\n      addRoundedRectPath(ctx, {x: inner.x, y: inner.y, w: inner.w, h: inner.h, radius});\r\n      ctx.fillStyle = options.backgroundColor;\r\n      ctx.fill();\r\n      ctx.fillStyle = options.borderColor;\r\n      ctx.fill('evenodd');\r\n    } else {\r\n      ctx.beginPath();\r\n      addRoundedRectPath(ctx, {x: inner.x, y: inner.y, w: inner.w, h: inner.h, radius});\r\n      ctx.fillStyle = options.backgroundColor;\r\n      ctx.fill();\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  inRange(mouseX, mouseY, useFinalPosition) {\r\n    return inRange(this, mouseX, mouseY, useFinalPosition);\r\n  }\r\n\r\n  inXRange(mouseX, useFinalPosition) {\r\n    return inRange(this, mouseX, null, useFinalPosition);\r\n  }\r\n\r\n  inYRange(mouseY, useFinalPosition) {\r\n    return inRange(this, null, mouseY, useFinalPosition);\r\n  }\r\n\r\n  getCenterPoint(useFinalPosition) {\r\n    const {x, y, width, height} = this.getProps(['x', 'y', 'width', 'height'], useFinalPosition);\r\n    return {\r\n      x: x + width / 2,\r\n      y: y + height / 2\r\n    };\r\n  }\r\n\r\n  tooltipPosition() {\r\n    return this.getCenterPoint();\r\n  }\r\n\r\n  getRange(axis) {\r\n    return axis === 'x' ? this.width / 2 : this.height / 2;\r\n  }\r\n}\r\n\r\nexport { MatrixController, MatrixElement };\r\n"],
  "mappings": "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",
  "names": []
}
